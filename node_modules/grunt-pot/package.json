{
  "name": "grunt-pot",
  "description": "Scan files and creates a .pot file using xgettext",
  "version": "0.1.2",
  "homepage": "https://github.com/stephenharris/grunt-pot",
  "author": {
    "name": "Stephen Harris",
    "email": "contact@stephenharris.info",
    "url": "http://stephenharris.info"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stephenharris/grunt-pot.git"
  },
  "bugs": {
    "url": "https://github.com/stephenharris/grunt-pot/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/stephenharris/grunt-pot/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-pot\n\n> Scan files and creates a .pot file using xgettext.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-pot --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-pot');\n```\n\n## The \"pot\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `pot` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  pot: {\n    options: {\n      // Specify options\n    },\n    files: {\n      // Specify files to scan\n    },\n  },\n})\n```\n\n### Options\n\n#### text_domain\nType: `String`\nDefault value: (Your package name)\n\nThis is the text domain of your project. Currently it is only used to generate the destination file name: `[text-domain].pot`.\n\n#### dest\nType: `String`\nDefault value: False\n\nEither a path to a folder (with trailing slash) for the generated `.pot` to be placed or a file path. When using a folder, the filename is generated using the text domain.\n\n#### overwrite\nType: `Bool`\nDefault value: True\n\nWhen false, append to pre-existing `.pot` file, rather than overwriting it.\n\n#### encoding\nType `String`|`Bool`\nDefault value: False.\n\nSpecifies the encoding of the input files. E.g. \"ASCII\" or \"UTF-8\". This option is needed only if some untranslated message strings or their corresponding comments contain non-ASCII characters. This option maps to `xgettext`'s `--from-code` command line option. False (default value) does not specify an encoding, by default, `xgettext` will interpret input files as ASCII. Note that Tcl and Glade input files are always assumed to be in UTF-8, regardless of this option.\n\n### language\nType `String`|`Bool`\nDefault value: False.\n\nSpecifies the language of the input files. The supported languages are C, C++, ObjectiveC, PO, Shell, Python, Lisp, EmacsLisp, librep, Scheme, Smalltalk, Java, JavaProperties, C#, awk, YCP, Tcl, Perl, PHP, GCC-source, NXStringTable, RST, Glade.\n\nBy default `xgettext` guesses the language based on the input file name extension.\n\n\n#### keywords\nType: `Array`\nDefault value: (none)\n\nAn array of strings ('keywords'). Each keyword specifies a gettext function to scan for:\n\n```\nkeywords: ['gettext', '__'], //functions to look for\n```\n\nBy default `xgettext` looks for strings in the *first argument* of each keyword. However you can specify a different argument with `id:argnum`. `xgettext` then uses the `argnum`-th argument.  If keyword is of the form `id:argnum1,argnum2`, `xgettext` looks for strings in the `argnum1`-th and in the `argnum2`-th argument of the call, and treats them as singular/plural variants for a message with plural handling.\n\n```\nkeywords: [ 'gettext', '__', 'dgettext:2', 'ngettext:1,2' ]\n```\n\nIf keyword is of the form `id:contextargnumc,argnum` or `id:argnum,contextargnumc`, `xgettext` treats strings in the `contextargnum`-th argument as a context specifier. \n\n```\nkeywords: [ 'gettext', '__', 'pgettext:1c,2']\n```\n\n#### package_name\nType: `String`\nDefault value: (name specified in your `package.json`)\n\nThis is the name that appears in the header msgid.\n\n#### package_version\nType: `String`\nDefault value: (version specified in your `package.json`)\n\nThis is the version that appears in the header msgid\n\n#### msgid_bugs_address\nType: `String`\nDefault value: (none)\n\nThe email (to report bugs to) that appears in the header msgid \n\n#### omit_header\nType: `Bool`\nDefault value: `false`\n\nWhether to omit the header. It is recommended to keep this `false`.\n\n#### comment_tag\nType: `String`\nDefault value: `/`\n\nComments immediately above a listed keyword which begin with this tag will be included as a comment in the generate `.pot` file. This is useful for providing hints or guidance for translators. For example, in your parsed file(s) you might have:\n\n```\n/// TRANSLATORS: This should be translated as a shorthand for YEAR-MONTH-DAY using 4, 2 and 2 digits.\necho gettext(\"yyyy-mm-dd\");\n```\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n  pot: {\n      options:{\n\t  text_domain: 'my-text-domain', //Your text domain. Produces my-text-domain.pot\n\t  dest: 'languages/', //directory to place the pot file\n\t  keywords: ['gettext', '__'], //functions to look for\n\t},\n\tfiles:{\n\t  src:  [ '**/*.php' ], //Parse all php files\n\t  expand: true,\n       }\n  },\n})\n```\n\n```js\ngrunt.initConfig({\n  pot: {\n      options:{\n\t  text_domain: 'my-text-domain', //Your text domain. Produces my-text-domain.pot\n\t  dest: 'languages/', //directory to place the pot file\n\t  keywords: [ 'gettext', 'ngettext:1,2' ], //functions to look for\n\t},\n\tfiles:{\n\t  src:  [ '**/*.php' ], //Parse all php files\n\t  expand: true,\n       }\n  },\n})\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n* *0.1.2* - Pass error messages from `exec` to Grunt.\n* *0.1.1* - Added `language`, `encoding` and `overwrite` option. Thanks to @robinnorth.\n* *0.1.0* - Initial release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-pot@0.1.2",
  "_from": "grunt-pot@"
}
